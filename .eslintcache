[{"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/index.js":"1","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/reportWebVitals.js":"2","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/App/App.js":"3","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/Strains/Strains.js":"4","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/NavBar/NavBar.js":"5","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/Experiences/Experiences.js":"6","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/Card/Card.js":"7","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/strain-data.js":"8","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/apiCalls.js":"9"},{"size":552,"mtime":1610833654843,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1610573427346,"results":"12","hashOfConfig":"11"},{"size":601,"mtime":1610835900543,"results":"13","hashOfConfig":"11"},{"size":1492,"mtime":1610832576429,"results":"14","hashOfConfig":"11"},{"size":351,"mtime":1610837038777,"results":"15","hashOfConfig":"11"},{"size":189,"mtime":1610834017954,"results":"16","hashOfConfig":"11"},{"size":1133,"mtime":1610833143558,"results":"17","hashOfConfig":"11"},{"size":1441,"mtime":1610821272736,"results":"18","hashOfConfig":"11"},{"size":212,"mtime":1610827611953,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ezys02",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/index.js",[],"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/reportWebVitals.js",[],["40","41"],"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/App/App.js",[],"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/Strains/Strains.js",["42"],"import React, { useState, useEffect } from 'react';\n// import PropTypes from 'prop-types'; // will need in future \nimport { fetchedStrainsData } from '../apiCalls';\nimport { strainsData } from '../strain-data';\nimport { Card } from '../Card/Card';\nconst myKey = process.env.REACT_APP_API_KEY;\n\nexport const Strains = () => {\n  const [strain, setStrain] = useState('');\n  const [strainName, setStrainName] = useState('');\n  const [allStrains, setAllStrains] = useState({});\n  useEffect(() => {\n    getAllStrains()\n  }, [])\n\n  const getAllStrains = async () => {\n    await fetchedStrainsData(myKey)\n    .then(data => setAllStrains(data))\n    .catch(err => console.log(err))\n  };\n\n  const selectedStrain = (event) => {\n    const selectedStrain = event.target.value;\n    const matchedStrain = allStrains[selectedStrain]\n    setStrain(matchedStrain);\n    setStrainName(selectedStrain);\n  };\n  \n  const strainsArray = Object.keys(allStrains);\n\n  const strainsInput = () => {\n    if (!Object.keys(allStrains).length) {\n      return (\n        <h2>Loading Strains...</h2>\n      )\n    } else {\n      return (\n      <select \n        onChange={ selectedStrain }>\n          <option value=''>Choose a Medicine</option>\n          {strainsArray.map(strain => {\n            return <option value={ strain }>{ strain }</option>})\n          }\n      </select>\n      )\n    }\n  }\n\n  return (\n    <section>\n      {strainsInput()}\n      {strain && <Card strainName={strainName} strain={strain}/>}\n    </section>\n  )\n}","/Users/cameronromo/turing/mod3/projects/my-strain-book/src/NavBar/NavBar.js",[],"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/Experiences/Experiences.js",[],"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/Card/Card.js",[],"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/strain-data.js",[],"/Users/cameronromo/turing/mod3/projects/my-strain-book/src/apiCalls.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":4,"column":10,"nodeType":"49","messageId":"50","endLine":4,"endColumn":21},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'strainsData' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]